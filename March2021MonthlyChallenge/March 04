#Intersection of Two Linked Lists

#Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
#If the two linked lists have no intersection at all, return null.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        if headA is None or headB is None:
            return None
        
        ptr1 = headA
        ptr2 = headB
        count1 = 0
        count2 = 0
        
        #if there is an intersection, the two pointers will meet when they go through their respective linked list and switch to the other
        #if any pointer has to switch more than 1 time, there is no intersection
        while count1<2 and count2<2:
            if ptr1 is ptr2:
                return ptr1
            if ptr1.next is None:
                ptr1 = headB
                count1+=1
            else:
                ptr1 = ptr1.next
            
            if ptr2.next is None:
                ptr2 = headA
                count2+=1
            else:
                ptr2 = ptr2.next
        return None            
